{"version":3,"sources":["components/Header.js","components/SearchForm.js","components/Table/TableHeaders.js","components/Table/TableData.js","components/Table/Table.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","icon","faBook","Filter","props","roleArray","Data","forEach","entry","push","role","htmlFor","name","list","type","onChange","handleInputChange","value","filter","placeholder","id","onClick","handleFormSubmit","tabledatadisplay","TableHeaders","scope","handleIdSort","faUserFriends","handleFirstNameSort","faSortAlphaDown","handleLastNameSort","handleSortState","faCity","TableData","data","map","employee","key","firstName","lastName","email","state","Table","AppContainer","rolefilter","users","noUsers","madeSearch","event","search","target","setState","preventDefault","filteredusers","length","a","sortedusers","sort","b","localeCompare","renderTable","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62735b66.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\nimport { faBook } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nexport default function Header() {\r\n  return (\r\n    <h1 className='pt-5 pb-5 header'>\r\n      <FontAwesomeIcon icon={faBook} />\r\n      Employee Directory\r\n    </h1>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Data from './Employees.json';\r\nimport './style.css';\r\n\r\nexport default function Filter(props) {\r\n  // lets give options in a datalist of possible filters on the input...\r\n  // push all of the roles into an array\r\n  const roleArray = [];\r\n  Data.forEach((entry) => {\r\n    roleArray.push(entry.role);\r\n  });\r\n\r\n  return (\r\n    <form className='search container mb-4 col-8'>\r\n      <div className='form-inline '>\r\n        <label className='mr-2' htmlFor='filter'>\r\n          Filter Role:\r\n        </label>\r\n        <input\r\n          name='filter'\r\n          list='roles'\r\n          type='text'\r\n          onChange={props.handleInputChange}\r\n          value={props.filter}\r\n          className='form-control col-6'\r\n          placeholder='Enter a role to filter'\r\n        />\r\n        <datalist id='roles'></datalist>\r\n        <button\r\n          type='submit'\r\n          className='filter-btn m-2'\r\n          onClick={props.handleFormSubmit}\r\n        >\r\n          Submit\r\n        </button>\r\n        <button className='filter-btn' onClick={props.tabledatadisplay}>\r\n          Refresh\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './style.css';\r\nimport { faUserFriends } from '@fortawesome/free-solid-svg-icons';\r\nimport { faSortAlphaDown } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCity } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport default function TableHeaders(props) {\r\n  return (\r\n    <thead className='tablehead'>\r\n      <tr>\r\n        <th scope='col'>\r\n          Employee ID\r\n          <button\r\n            className='btn btn-outline-dark btn-sm ml-2'\r\n            onClick={props.handleIdSort}\r\n          >\r\n            <FontAwesomeIcon icon={faUserFriends} />\r\n          </button>\r\n        </th>\r\n        <th scope='col'>\r\n          First Name\r\n          <button\r\n            className='btn btn-outline-dark btn-sm ml-2'\r\n            onClick={props.handleFirstNameSort}\r\n          >\r\n            <FontAwesomeIcon icon={faSortAlphaDown} />\r\n          </button>\r\n        </th>\r\n        <th scope='col'>\r\n          Last Name\r\n          <button\r\n            className='btn btn-outline-dark btn-sm ml-2'\r\n            onClick={props.handleLastNameSort}\r\n          >\r\n            <FontAwesomeIcon icon={faSortAlphaDown} />\r\n          </button>\r\n        </th>\r\n        <th scope='col'>Role</th>\r\n        <th scope='col'>Email</th>\r\n        <th scope='col'>\r\n          state\r\n          <button\r\n            className='btn btn-outline-dark btn-sm ml-2'\r\n            onClick={props.handleSortState}\r\n          >\r\n            <FontAwesomeIcon icon={faCity} />\r\n          </button>\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nexport default function TableData(props) {\r\n  return (\r\n    //   map through all results and create a row in the table for each employee in the results\r\n    <tbody className='tabledata'>\r\n      {props.data.map((employee) => (\r\n        <tr key={employee.id}>\r\n          <td>{employee.id}</td>\r\n          <td>{employee.firstName}</td>\r\n          <td>{employee.lastName}</td>\r\n          <td>{employee.role}</td>\r\n          <td>{employee.email}</td>\r\n          <td>{employee.state}</td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport TableHeaders from './TableHeaders';\r\nimport TableData from './TableData';\r\nimport './style.css';\r\n\r\nexport default function Table(props) {\r\n  return (\r\n    <div className='table-div pb-5'>\r\n      <table className='table'>\r\n        <TableHeaders\r\n          handleIdSort={props.handleIdSort}\r\n          handleFirstNameSort={props.handleFirstNameSort}\r\n          handleLastNameSort={props.handleLastNameSort}\r\n          handleSortState={props.handleSortState}\r\n        />\r\n        <TableData data={props.data} />\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Data from './Employees.json';\r\nimport SearchForm from './SearchForm';\r\nimport Table from './Table/Table';\r\nimport './style.css';\r\n\r\nexport default class AppContainer extends React.Component {\r\n  state = {\r\n    rolefilter: '',\r\n    users: Data,\r\n    noUsers: false,\r\n    madeSearch: false,\r\n  };\r\n\r\n  //   set the filter in the state to what is entered in the input\r\n  handleInputChange = (event) => {\r\n    const search = event.target.name;\r\n    const value = event.target.value;\r\n    this.setState({ [search]: value });\r\n  };\r\n\r\n  handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const filteredusers = Data.filter(\r\n      (employee) => employee.role === this.state.filter\r\n    );\r\n   \r\n    if (filteredusers.length !== 0) {\r\n      this.setState({\r\n        users: filteredusers,\r\n        noUsers: false,\r\n        madeSearch: true,\r\n      });\r\n    } else {\r\n      this.setState({ noUsers: true });\r\n    }\r\n    // clear the input\r\n    this.setState({ filter: '' });\r\n  };\r\n\r\n  //   this resets the table by setting the state.users back to the original data from the Employee.json.  It also resets the order of the data, if the data has been sorted\r\n  tabledatadisplay = async (event) => {\r\n    event.preventDefault();\r\n    await this.setState({ users: Data, noUsers: false, madeSearch: false });\r\n    this.handleIdSort();\r\n  };\r\n\r\n  handleFirstNameSort = (event) => {\r\n    event.preventDefault();\r\n\r\n    let sortedusers = this.state.users.sort((a, b) =>\r\n      a.firstName.localeCompare(b.firstName)\r\n    );\r\n    this.setState({ users: sortedusers, noUsers: false });\r\n  };\r\n\r\n  handleLastNameSort = (event) => {\r\n    event.preventDefault();\r\n\r\n    let sortedusers = this.state.users.sort((a, b) =>\r\n      a.lastName.localeCompare(b.lastName)\r\n    );\r\n    this.setState({ users: sortedusers, noUsers: false });\r\n  };\r\n\r\n  handleSortState = (event) => {\r\n    event.preventDefault();\r\n\r\n    let sortedusers = this.state.users.sort((a, b) =>\r\n      a.state.localeCompare(b.state)\r\n    );\r\n    this.setState({ users: sortedusers, noUsers: false });\r\n  };\r\n\r\n  handleIdSort = () => {\r\n    const sortedusers = this.state.users.sort((a, b) => {\r\n      return a.id - b.id;\r\n    });\r\n    this.setState({ users: sortedusers, noUsers: false });\r\n  };\r\n\r\n  //   Conditional rendering if there are no users that match the filtered search\r\n  renderTable = () => {\r\n    if (this.state.noUsers === false) {\r\n      return (\r\n        <Table\r\n          handleIdSort={this.handleIdSort}\r\n          handleFirstNameSort={this.handleFirstNameSort}\r\n          handleLastNameSort={this.handleLastNameSort}\r\n          handleSortState={this.handleSortState}\r\n          data={this.state.users}\r\n        />\r\n      );\r\n    } else if (this.state.noUsers === true) {\r\n      return <p>There were no results,Search Again..</p>;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n        <SearchForm\r\n          handleFormSubmit={this.handleFormSubmit}\r\n          handleInputChange={this.handleInputChange}\r\n          filter={this.state.filter}\r\n          data={this.state.users}\r\n          tabledatadisplay={this.tabledatadisplay}\r\n        />\r\n        {this.renderTable()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Header from './components/Header';\r\nimport Main from './components/Main';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App className=\"App\"/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}